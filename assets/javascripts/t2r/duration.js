export const ROUND_UP = 'U';
export const ROUND_DOWN = 'D';
export const ROUND_REGULAR = 'R';
export class Duration {
    constructor(duration = 0) {
        this._seconds = 0;
        duration = duration || 0;
        if ('number' === typeof duration) {
            this.seconds = duration;
            return;
        }
        if (duration.match(/^\d+$/)) {
            this.seconds = parseInt(duration);
            return;
        }
        try {
            this.setHHMM(duration);
        }
        catch (e) {
            throw 'Error: "' + duration + '" is not a number or an hh:mm string.';
        }
    }
    get hours() {
        return Math.floor(this._seconds / 3600);
    }
    get minutes() {
        return Math.floor(this._seconds / 60);
    }
    get seconds() {
        return this._seconds;
    }
    set seconds(value) {
        if (value < 0) {
            throw `Value cannot be negative: ${value}`;
        }
        this._seconds = value;
    }
    setHHMM(hhmm) {
        let parts;
        let pattern;
        let hh;
        let mm;
        let error = `Invalid hh:mm format: ${hhmm}`;
        pattern = /^(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            hh = parseInt(hhmm.match(pattern).pop());
            this.seconds = hh * 60 * 60;
            return;
        }
        pattern = /^(\d{0,2}):(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            parts = hhmm.match(pattern).slice(-2);
            mm = parseInt(parts.pop() || '0');
            hh = parseInt(parts.pop() || '0');
            if (mm > 59) {
                throw error;
            }
            this.seconds = hh * 60 * 60 + mm * 60;
            return;
        }
        pattern = /^(\d{0,2})\.(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            parts = hhmm.match(pattern).slice(-2);
            mm = (60 * parts[1]) / Math.pow(10, parts[1].length);
            hh = Math.round(parts[0]);
            this.seconds = hh * 60 * 60 + mm * 60;
            return;
        }
        throw error;
    }
    ;
    asHHMM() {
        let hh = this.hours.toString().padStart(2, '0');
        let mm = (this.minutes % 60).toString().padStart(2, '0');
        return `${hh}:${mm}`;
    }
    ;
    asDecimal() {
        let hours = this.minutes / 60;
        let output = hours.toFixed(3);
        return output.substr(0, output.length - 1);
    }
    ;
    add(other) {
        this.seconds = this.seconds + other.seconds;
    }
    ;
    sub(other) {
        this.seconds = Math.max(this.seconds - other.seconds, 0);
    }
    ;
    roundTo(minutes, direction) {
        if (0 === minutes) {
            return;
        }
        let seconds = minutes * 60;
        let correction = this.seconds % seconds;
        if (correction === 0) {
            return;
        }
        switch (direction) {
            case ROUND_REGULAR:
                if (correction >= seconds / 2) {
                    this.roundTo(minutes, ROUND_UP);
                }
                else {
                    this.roundTo(minutes, ROUND_DOWN);
                }
                break;
            case ROUND_UP:
                this.add(new Duration(seconds - correction));
                break;
            case ROUND_DOWN:
                this.sub(new Duration(correction));
                break;
            default:
                throw 'Invalid rounding direction. Please use one of ROUND_*.';
        }
    }
    ;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hc3NldHMuc3JjL2phdmFzY3JpcHRzL3Qyci9kdXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFBO0FBTzNCLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUE7QUFRN0IsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQTtBQVFoQyxNQUFNLE9BQU8sUUFBUTtJQWNuQixZQUFZLFdBQTRCLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUE7UUFDakIsUUFBUSxHQUFHLFFBQVEsSUFBSSxDQUFDLENBQUM7UUFFekIsSUFBSSxRQUFRLEtBQUssT0FBTyxRQUFRLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7WUFDeEIsT0FBTTtTQUNQO1FBRUQsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ2pDLE9BQU07U0FDUDtRQUVELElBQUk7WUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3hCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLFVBQVUsR0FBRyxRQUFRLEdBQUcsdUNBQXVDLENBQUM7U0FDdkU7SUFDSCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDekMsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFRCxJQUFJLE9B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