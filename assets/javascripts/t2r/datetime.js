export class DateTime {
    constructor(date = undefined) {
        this.date = date || new Date();
    }
    toHTMLDate() {
        const yyyy = this.date.getFullYear();
        const mm = (this.date.getMonth() + 1).toString().padStart(2, '0');
        const dd = this.date.getDate().toString().padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }
    toISOString(zeroTime = false) {
        let result = this.date.toISOString();
        if (!zeroTime)
            return result;
        return result.split('T')[0] + 'T00:00:00Z';
    }
    static fromString(date) {
        const dateParts = date.split(/[^\d]/).map((part) => {
            return parseInt(part);
        });
        if (dateParts.length < 3) {
            console.error('Invalid date', date);
            throw `Invalid date: ${date}`;
        }
        for (let i = 3; i <= 6; i++) {
            if (typeof dateParts[i] === 'undefined') {
                dateParts[i] = 0;
            }
        }
        dateParts[1] -= 1;
        try {
            return new DateTime(new Date(dateParts[0], dateParts[1], dateParts[2], dateParts[3], dateParts[4], dateParts[5], dateParts[6]));
        }
        catch (e) {
            console.error('Invalid date', date);
            throw `Invalid date: ${date}`;
        }
    }
}
export var RoundingMethod;
(function (RoundingMethod) {
    RoundingMethod["Up"] = "U";
    RoundingMethod["Down"] = "D";
    RoundingMethod["Regular"] = "R";
})(RoundingMethod || (RoundingMethod = {}));
export class Duration {
    constructor(duration = 0) {
        this._seconds = 0;
        duration = duration || 0;
        if ('number' === typeof duration) {
            this.seconds = duration;
            return;
        }
        if (duration.match(/^\d+$/)) {
            this.seconds = parseInt(duration);
            return;
        }
        try {
            this.setHHMM(duration);
        }
        catch (e) {
            throw 'Error: "' + duration + '" is not a number or an hh:mm string.';
        }
    }
    get hours() {
        return Math.floor(this._seconds / 3600);
    }
    get minutes() {
        return Math.floor(this._seconds / 60);
    }
    get seconds() {
        return this._seconds;
    }
    set seconds(value) {
        if (value < 0) {
            throw `Value cannot be negative: ${value}`;
        }
        this._seconds = value;
    }
    setHHMM(hhmm) {
        let parts;
        let pattern;
        let hh;
        let mm;
        const error = `Invalid hh:mm format: ${hhmm}`;
        pattern = /^(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            hh = parseInt(hhmm.match(pattern).pop());
            this.seconds = hh * 60 * 60;
            return;
        }
        pattern = /^(\d{0,2}):(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            parts = hhmm.match(pattern).slice(-2);
            mm = parseInt(parts.pop() || '0');
            hh = parseInt(parts.pop() || '0');
            if (mm > 59) {
                throw error;
            }
            this.seconds = hh * 60 * 60 + mm * 60;
            return;
        }
        pattern = /^(\d{0,2})\.(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            parts = hhmm.match(pattern).slice(-2);
            mm = (60 * parts[1]) / Math.pow(10, parts[1].length);
            hh = Math.round(parts[0]);
            this.seconds = hh * 60 * 60 + mm * 60;
            return;
        }
        throw error;
    }
    asHHMM() {
        const hh = this.hours.toString().padStart(2, '0');
        const mm = (this.minutes % 60).toString().padStart(2, '0');
        return `${hh}:${mm}`;
    }
    asDecimal() {
        const hours = this.minutes / 60;
        const output = hours.toFixed(3);
        return output.substr(0, output.length - 1);
    }
    add(other) {
        this.seconds = this.seconds + other.seconds;
    }
    sub(other) {
        this.seconds = Math.max(this.seconds - other.seconds, 0);
    }
    roundTo(minutes, method) {
        if (0 === minutes)
            return;
        const seconds = minutes * 60;
        const correction = this.seconds % seconds;
        if (correction === 0)
            return;
        switch (method) {
            case RoundingMethod.Regular:
                if (correction >= seconds / 2) {
                    this.roundTo(minutes, RoundingMethod.Up);
                }
                else {
                    this.roundTo(minutes, RoundingMethod.Down);
                }
                break;
            case RoundingMethod.Up:
                this.add(new Duration(seconds - correction));
                break;
            case RoundingMethod.Down:
                this.sub(new Duration(correction));
                break;
            default:
                throw 'Invalid rounding method.';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hc3NldHMuc3JjL2phdmFzY3JpcHRzL3Qyci9kYXRldGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLE9BQU8sUUFBUTtJQUluQixZQUFZLE9BQXlCLFNBQVM7UUFDNUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBV0QsVUFBVTtRQUNSLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDakUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBRTFELE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFBO0lBQzlCLENBQUM7SUFVRCxXQUFXLENBQUMsV0FBb0IsS0FBSztRQUNuQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3BDLElBQUksQ0FBQyxRQUFRO1lBQUUsT0FBTyxNQUFNLENBQUE7UUFFNUIsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQTtJQUM1QyxDQUFDO0lBV0QsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFZO1FBRTVCLE1BQU0sU0FBUyxHQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxD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