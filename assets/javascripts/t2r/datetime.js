export class DateTime {
    constructor(date = undefined) {
        this.date = date || new Date();
    }
    toHTMLDate() {
        const yyyy = this.date.getFullYear();
        const mm = (this.date.getMonth() + 1).toString().padStart(2, '0');
        const dd = this.date.getDate().toString().padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }
    toISOString(zeroTime = false) {
        if (!zeroTime) {
            return this.date.toISOString();
        }
        return this.date.toISOString().split('T')[0] + 'T00:00:00.000Z';
    }
    static fromString(date) {
        const dateParts = date.split(/[^\d]/).map((part) => {
            return parseInt(part);
        });
        if (dateParts.length < 3) {
            throw `Invalid date: ${date}`;
        }
        for (let i = 3; i <= 6; i++) {
            if (typeof dateParts[i] === 'undefined') {
                dateParts[i] = 0;
            }
        }
        for (let i = 1; i <= 6; i++) {
            if (isNaN(dateParts[i]))
                throw `Invalid date: ${date}`;
        }
        if (dateParts[1] < 1 || dateParts[1] > 12) {
            throw `Invalid date: ${date}`;
        }
        try {
            return new DateTime(new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4], dateParts[5], dateParts[6]));
        }
        catch (e) {
            console.error('Invalid date', date);
            throw `Invalid date: ${date}`;
        }
    }
}
export var DurationRoundingMethod;
(function (DurationRoundingMethod) {
    DurationRoundingMethod["Up"] = "U";
    DurationRoundingMethod["Down"] = "D";
    DurationRoundingMethod["Regular"] = "R";
})(DurationRoundingMethod || (DurationRoundingMethod = {}));
export class Duration {
    constructor(duration = 0) {
        this._seconds = 0;
        duration = duration || 0;
        if ('number' === typeof duration) {
            this.seconds = duration;
            return;
        }
        if (duration.match(/^\d+$/)) {
            this.seconds = parseInt(duration);
            return;
        }
        try {
            this.setHHMM(duration);
        }
        catch (e) {
            throw 'Error: "' + duration + '" is not a number or an hh:mm string.';
        }
    }
    get hours() {
        return Math.floor(this._seconds / 3600);
    }
    get minutes() {
        return Math.floor(this._seconds / 60);
    }
    get seconds() {
        return this._seconds;
    }
    set seconds(value) {
        if (value < 0) {
            throw `Value cannot be negative: ${value}`;
        }
        this._seconds = value;
    }
    setHHMM(hhmm) {
        let parts = [];
        let pattern;
        let hh;
        let mm;
        const error = `Invalid hh:mm format: ${hhmm}`;
        pattern = /^(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            const matches = hhmm.match(pattern);
            hh = parseInt(matches.pop());
            this.seconds = hh * 60 * 60;
            return;
        }
        pattern = /^(\d{0,2}):(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            const matches = hhmm.match(pattern);
            parts = matches.slice(-2);
            mm = parseInt(parts.pop() || '0');
            hh = parseInt(parts.pop() || '0');
            if (mm > 59)
                throw error;
            this.seconds = hh * 60 * 60 + mm * 60;
            return;
        }
        pattern = /^(\d{0,2})\.(\d{1,2})$/;
        if (hhmm.match(pattern)) {
            const matches = hhmm.match(pattern);
            parts = matches.slice(-2);
            hh = parseInt(parts[0] || '0');
            hh = Math.round(hh);
            mm = parseInt(parts[1] || '0');
            mm = (60 * mm) / Math.pow(10, parts[1].length);
            this.seconds = hh * 60 * 60 + mm * 60;
            return;
        }
        throw error;
    }
    asHHMM() {
        const hh = this.hours.toString().padStart(2, '0');
        const mm = (this.minutes % 60).toString().padStart(2, '0');
        return `${hh}:${mm}`;
    }
    asDecimal() {
        const hours = this.minutes / 60;
        const output = hours.toFixed(3);
        return output.substr(0, output.length - 1);
    }
    add(other) {
        this.seconds = this.seconds + other.seconds;
    }
    sub(other) {
        this.seconds = Math.max(this.seconds - other.seconds, 0);
    }
    roundTo(minutes, method) {
        if (0 === minutes)
            return;
        const seconds = minutes * 60;
        const correction = this.seconds % seconds;
        if (correction === 0)
            return;
        switch (method) {
            case DurationRoundingMethod.Regular:
                if (correction >= seconds / 2) {
                    this.roundTo(minutes, DurationRoundingMethod.Up);
                }
                else {
                    this.roundTo(minutes, DurationRoundingMethod.Down);
                }
                break;
            case DurationRoundingMethod.Up:
                this.add(new Duration(seconds - correction));
                break;
            case DurationRoundingMethod.Down:
                this.sub(new Duration(correction));
                break;
            default:
                throw 'Invalid rounding method.';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hc3NldHMuc3JjL2phdmFzY3JpcHRzL3Qyci9kYXRldGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLE9BQU8sUUFBUTtJQUluQixZQUFZLE9BQXlCLFNBQVM7UUFDNUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBV0QsVUFBVTtRQUNSLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDakUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBRTFELE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFBO0lBQzlCLENBQUM7SUFVRCxXQUFXLENBQUMsUUFBUSxHQUFHLEtBQUs7UUFDMUIsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtTQUMvQjtRQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsZ0JBQWdCLENBQUE7SUFDakUsQ0FBQztJQVdELE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBWTtRQUU1QixNQUFNLFNBQVMsR0FBYSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxD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