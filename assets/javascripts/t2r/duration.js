export var Rounding;
(function (Rounding) {
    Rounding["Up"] = "U";
    Rounding["Down"] = "D";
    Rounding["Regular"] = "R";
})(Rounding || (Rounding = {}));
export class Duration {
    constructor(duration = 0) {
        this._seconds = 0;
        duration = duration || 0;
        if ('number' === typeof duration) {
            this.seconds = duration;
            return;
        }
        if (duration.match(/^\d+$/)) {
            this.seconds = parseInt(duration);
            return;
        }
        try {
            this.setHHMM(duration);
        }
        catch (e) {
            throw 'Error: "' + duration + '" is not a number or an hh:mm string.';
        }
    }
    get hours() {
        return Math.floor(this._seconds / 3600);
    }
    get minutes() {
        return Math.floor(this._seconds / 60);
    }
    get seconds() {
        return this._seconds;
    }
    set seconds(value) {
        if (value < 0) {
            throw `Value cannot be negative: ${value}`;
        }
        this._seconds = value;
    }
    setHHMM(hhmm) {
        let parts;
        let pattern;
        let hh;
        let mm;
        const error = `Invalid hh:mm format: ${hhmm}`;
        pattern = /^(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            hh = parseInt(hhmm.match(pattern).pop());
            this.seconds = hh * 60 * 60;
            return;
        }
        pattern = /^(\d{0,2}):(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            parts = hhmm.match(pattern).slice(-2);
            mm = parseInt(parts.pop() || '0');
            hh = parseInt(parts.pop() || '0');
            if (mm > 59) {
                throw error;
            }
            this.seconds = hh * 60 * 60 + mm * 60;
            return;
        }
        pattern = /^(\d{0,2})\.(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            parts = hhmm.match(pattern).slice(-2);
            mm = (60 * parts[1]) / Math.pow(10, parts[1].length);
            hh = Math.round(parts[0]);
            this.seconds = hh * 60 * 60 + mm * 60;
            return;
        }
        throw error;
    }
    asHHMM() {
        const hh = this.hours.toString().padStart(2, '0');
        const mm = (this.minutes % 60).toString().padStart(2, '0');
        return `${hh}:${mm}`;
    }
    asDecimal() {
        const hours = this.minutes / 60;
        const output = hours.toFixed(3);
        return output.substr(0, output.length - 1);
    }
    add(other) {
        this.seconds = this.seconds + other.seconds;
    }
    sub(other) {
        this.seconds = Math.max(this.seconds - other.seconds, 0);
    }
    roundTo(minutes, method) {
        if (0 === minutes)
            return;
        const seconds = minutes * 60;
        const correction = this.seconds % seconds;
        if (correction === 0)
            return;
        switch (method) {
            case Rounding.Regular:
                if (correction >= seconds / 2) {
                    this.roundTo(minutes, Rounding.Up);
                }
                else {
                    this.roundTo(minutes, Rounding.Down);
                }
                break;
            case Rounding.Up:
                this.add(new Duration(seconds - correction));
                break;
            case Rounding.Down:
                this.sub(new Duration(correction));
                break;
            default:
                throw 'Invalid rounding method.';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hc3NldHMuc3JjL2phdmFzY3JpcHRzL3Qyci9kdXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQU4sSUFBWSxRQUlYO0FBSkQsV0FBWSxRQUFRO0lBQ2xCLG9CQUFRLENBQUE7SUFDUixzQkFBVSxDQUFBO0lBQ1YseUJBQWEsQ0FBQTtBQUNmLENBQUMsRUFKVyxRQUFRLEtBQVIsUUFBUSxRQUluQjtBQVFELE1BQU0sT0FBTyxRQUFRO0lBY25CLFlBQVksV0FBNEIsQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQTtRQUNqQixRQUFRLEdBQUcsUUFBUSxJQUFJLENBQUMsQ0FBQztRQUV6QixJQUFJLFFBQVEsS0FBSyxPQUFPLFFBQVEsRUFBRTtZQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztZQUN4QixPQUFNO1NBQ1A7UUFFRCxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDakMsT0FBTTtTQUNQO1FBRUQsSUFBSTtZQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDeEI7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sVUFBVSxHQUFHLFFBQVEsR0FBRyx1Q0FBdUMsQ0FBQztTQUN2RTtJQUNILENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDdkMsQ0FBQztJQUVELElBQUks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