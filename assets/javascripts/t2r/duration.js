export const ROUND_UP = 'U';
export const ROUND_DOWN = 'D';
export const ROUND_REGULAR = 'R';
export class Duration {
    constructor(duration = null) {
        duration = duration || 0;
        if ('number' === typeof duration) {
            this.setSeconds(duration);
            return;
        }
        if ('string' === typeof duration && duration.match(/^\d+$/)) {
            this.setSeconds(duration);
            return;
        }
        try {
            this.setHHMM(duration);
        }
        catch (e) {
            throw 'Error: "' + duration + '" is not a number or an hh:mm string.';
        }
    }
    setSeconds(seconds) {
        seconds += '';
        if (!seconds.match(/^\d+$/)) {
            throw 'Error: ' + seconds + ' is not a valid number.';
        }
        this._seconds = parseInt(seconds);
        this._minutes = Math.floor(this._seconds / 60);
        this._hours = Math.floor(this._minutes / 60);
        this._minutes = this._minutes % 60;
    }
    ;
    getSeconds(imprecise = false) {
        imprecise = imprecise === true;
        var output = this._seconds;
        if (imprecise) {
            output = output - output % 60;
        }
        return output;
    }
    ;
    setHHMM(hhmm) {
        var parts = null;
        var pattern = /^(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            var parts = hhmm.match(pattern).slice(-1);
            parts.push('00');
        }
        var pattern = /^(\d{0,2}):(\d{0,2})$/;
        if (hhmm.match(pattern)) {
            parts = hhmm.match(pattern).slice(-2);
            if (parts[1].length < 2) {
                parts = null;
            }
            else if (parts[1] > 59) {
                parts = null;
            }
        }
        var pattern = /^(\d{0,2})\.(\d{0,2})$/;
        if (!parts && hhmm.match(pattern)) {
            parts = hhmm.match(pattern).slice(-2);
            parts[1] = (60 * parts[1]) / Math.pow(10, parts[1].length);
            parts[1] = Math.round(parts[1]);
        }
        if (!parts || parts.length !== 2) {
            throw 'Error: ' + hhmm + ' is not in hh:mm format.';
        }
        parts[0] = (parts[0].length == 0) ? 0 : parseInt(parts[0]);
        parts[1] = (parts[1].length == 0) ? 0 : parseInt(parts[1]);
        if (isNaN(parts[0]) || isNaN(parts[1])) {
            throw 'Error: ' + hhmm + ' is not in hh:mm format.';
        }
        var secs = parts[0] * 60 * 60 + parts[1] * 60;
        this.setSeconds(secs);
    }
    ;
    getHours(force2) {
        force2 = force2 || false;
        var output = this._hours;
        if (force2) {
            output = ('00' + output).substr(-2);
        }
        return output;
    }
    ;
    getMinutes(force2) {
        force2 = force2 || false;
        var output = this._minutes;
        if (force2) {
            output = ('00' + output).substr(-2);
        }
        return output;
    }
    ;
    asHHMM() {
        return this.getHours(true) + ':' + this.getMinutes(true);
    }
    ;
    asDecimal(ignoreSeconds) {
        var output = this.getSeconds(ignoreSeconds) / 3600;
        output = output.toFixed(3);
        output = output.substr(0, output.length - 1);
        return output;
    }
    ;
    add(duration) {
        var oDuration = ('object' === typeof duration)
            ? duration : new Duration(duration);
        var seconds = this.getSeconds() + oDuration.getSeconds();
        this.setSeconds(seconds);
    }
    ;
    sub(duration) {
        var oDuration = ('object' === typeof duration)
            ? duration : new Duration(duration);
        var seconds = this.getSeconds() - oDuration.getSeconds();
        seconds = (seconds >= 0) ? seconds : 0;
        this.setSeconds(seconds);
    }
    ;
    roundTo(minutes, direction) {
        if (0 === minutes) {
            return;
        }
        var seconds = minutes * 60;
        var correction = this.getSeconds() % seconds;
        if (correction === 0) {
            return;
        }
        switch (direction) {
            case ROUND_REGULAR:
                if (correction >= seconds / 2) {
                    this.roundTo(minutes, ROUND_UP);
                }
                else {
                    this.roundTo(minutes, ROUND_DOWN);
                }
                break;
            case ROUND_UP:
                this.add(seconds - correction);
                break;
            case ROUND_DOWN:
                this.sub(correction);
                break;
            default:
                throw 'Invalid rounding direction. Please use one of ROUND_*.';
        }
    }
    ;
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9hc3NldHMuc3JjL2phdmFzY3JpcHRzL3Qyci9kdXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFBO0FBTzNCLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUE7QUFRN0IsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQTtBQVFoQyxNQUFNLE9BQU8sUUFBUTtJQVduQixZQUFZLFdBQW1DLElBQUk7UUFDakQsUUFBUSxHQUFHLFFBQVEsSUFBSSxDQUFDLENBQUM7UUFHekIsSUFBSSxRQUFRLEtBQUssT0FBTyxRQUFRLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMxQixPQUFNO1NBQ1A7UUFHRCxJQUFJLFFBQVEsS0FBSyxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzNELElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUIsT0FBTTtTQUNQO1FBRUQsSUFBSTtZQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDeEI7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1BQU0sVUFBVSxHQUFHLFFBQVEsR0FBRyx1Q0FBdUMsQ0FBQztTQUN2RTtJQUNILENBQUM7SUFPRCxVQUFVLENBQUMsT0FBTztRQUVoQixPQUFPLElBQUksRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxHQUFHLHlCQUF5QixDQUFDO1NBQ3ZEO1FBR0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFHbEMsSUFBSSxDQUFD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